{"version":3,"sources":["Components/GameSettingBar/GameSettingBar.jsx","Components/PlayingField/PlayingField.jsx","Components/WinnersList/WinnersList.jsx","App.js","serviceWorker.js","index.js"],"names":["GameSettingsBar","state","name","chaningMode","e","props","setGameFinished","setGameMode","onButtonClick","setGameInProgress","onNameChange","this","gameSettings","gameInProgress","gameFinished","gameMode","className","disabled","onChange","Object","keys","map","mode","key","value","setState","currentTarget","trim","type","onClick","Component","PlayingField","gameStartAndFail","computerScore","Math","floor","fields","length","playerScore","setWinnerName","playerName","element","random","failed","won","inAction","currentField","setTimeout","delay","gameWin","field","find","item","React","createRef","width","i","createFields","current","offsetWidth","prevProps","winnerName","ref","style","gridTemplateColumns","height","backgroundColor","WINNERS_LIST_URL","WinnersList","winnersList","sent","getWinnersList","a","async","fetch","response","json","data","console","error","sendWinnerAndUpdate","winner","date","moment","format","id","method","body","JSON","stringify","headers","then","res","GAME_SETTINGS_URL","App","getGameSettingsData","hasOwnProperty","modeName","setGameModeValue","modeSettings","values","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3ce1731.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./GameSettingBar.scss\";\r\n\r\nclass GameSettingsBar extends Component {\r\n  state = {\r\n    name: \"\"\r\n  };\r\n\r\n  chaningMode = e => {\r\n    this.props.setGameFinished(false);\r\n    this.props.setGameMode(e);\r\n  };\r\n\r\n  onButtonClick = () => {\r\n    this.props.setGameFinished(false);\r\n    this.props.setGameInProgress(true);\r\n    this.props.onNameChange(this.state.name);\r\n  };\r\n\r\n  render() {\r\n    const { gameSettings, gameInProgress, gameFinished, gameMode } = this.props;\r\n\r\n    return (\r\n      <nav className=\"bg-transparent navbar navbar-expand-lg navbar-light bg-light\">\r\n        <select\r\n          className=\"custom-select text-white\"\r\n          disabled={gameInProgress}\r\n          onChange={this.chaningMode}\r\n        >\r\n          <option>Pick game mode</option>\r\n          {gameSettings &&\r\n            Object.keys(gameSettings).map(mode => (\r\n              <option\r\n                key={gameSettings[mode][\"modeName\"]}\r\n                value={gameSettings[mode][\"modeName\"]}\r\n              >\r\n                {gameSettings[mode][\"modeName\"]}\r\n              </option>\r\n            ))}\r\n        </select>\r\n        <input\r\n          className=\"form-control mr-sm-2\"\r\n          onChange={e => {\r\n            this.setState({ name: e.currentTarget.value.trim() });\r\n          }}\r\n          value={this.state.name}\r\n          disabled={gameInProgress}\r\n          type=\"text\"\r\n        />\r\n        <button\r\n          className=\"btn btn-outline-success my-2 my-sm-0\"\r\n          disabled={!this.state.name || gameInProgress || !gameMode}\r\n          onClick={this.onButtonClick}\r\n        >\r\n          {gameFinished ? \"Replay\" : \"Play\"}\r\n        </button>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameSettingsBar;\r\n","import React, { Component } from \"react\";\r\nimport \"./PlayingField.scss\";\r\n\r\nclass PlayingField extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fields: [],\r\n      currentField: {},\r\n      computerScore: 0,\r\n      playerScore: 0\r\n    };\r\n    this.element = React.createRef();\r\n    this.width = 0;\r\n  }\r\n\r\n  createFields() {\r\n    const fields = [];\r\n    for (let i = 0; i < this.props.gameMode.field ** 2; i++) {\r\n      fields[`${i}`] = {\r\n        failed: false,\r\n        won: false,\r\n        inAction: false,\r\n        key: `${i}`\r\n      };\r\n    }\r\n    this.setState({ fields });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.createFields();\r\n    this.width = this.element.current.offsetWidth;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props !== prevProps) {\r\n      this.setState({\r\n        fields: [],\r\n        currentField: {},\r\n        computerScore: 0,\r\n        playerScore: 0\r\n      });\r\n      this.createFields();\r\n      if (this.props.gameInProgress && !this.props.gameFinished) {\r\n        this.gameStartAndFail();\r\n        this.width = this.element.current.offsetWidth;\r\n      }\r\n    }\r\n  }\r\n\r\n  gameStartAndFail = () => {\r\n    if (\r\n      this.state.computerScore >= Math.floor(this.state.fields.length / 2) ||\r\n      this.state.playerScore >= Math.floor(this.state.fields.length / 2)\r\n    ) {\r\n      this.props.setGameFinished(true);\r\n      this.props.setGameInProgress(false);\r\n      return this.state.computerScore > this.state.playerScore\r\n        ? this.props.setWinnerName(\"Computer AI\")\r\n        : this.props.setWinnerName(this.props.playerName);\r\n    }\r\n    const fields = [...this.state.fields];\r\n    const element = fields[Math.floor(Math.random() * fields.length)];\r\n    if (element.failed || element.won) {\r\n      return this.gameStartAndFail();\r\n    }\r\n    element.inAction = true;\r\n    this.setState({ fields, currentField: element });\r\n    setTimeout(() => {\r\n      if (element.won !== true && element.inAction !== false) {\r\n        let computerScore = this.state.computerScore;\r\n        computerScore += 1;\r\n        element.inAction = false;\r\n        element.failed = true;\r\n        this.computerScore += 1;\r\n        this.setState({ fields, computerScore });\r\n        this.gameStartAndFail();\r\n      }\r\n    }, this.props.gameMode.delay);\r\n  };\r\n\r\n  gameWin = field => {\r\n    if (!this.props.gameInProgress) return;\r\n    const fields = [...this.state.fields];\r\n    const currentField = fields.find(item => item.key === field.key);\r\n    if (currentField === this.state.currentField) {\r\n      let playerScore = this.state.playerScore;\r\n      playerScore += 1;\r\n      fields[`${field.key}`].won = true;\r\n      fields[`${field.key}`].inAction = false;\r\n      this.setState({ fields, playerScore }, this.gameStartAndFail());\r\n    } else {\r\n      let computerScore = this.state.computerScore;\r\n      computerScore += 1;\r\n      const field = fields[`${this.state.currentField.key}`];\r\n      fields[`${field.key}`].failed = true;\r\n      fields[`${field.key}`].inAction = false;\r\n      this.setState({ fields, computerScore }, this.gameStartAndFail());\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { fields } = this.state;\r\n    const { gameMode, winnerName, gameFinished } = this.props;\r\n\r\n    return (\r\n      <section className=\"playing-area\">\r\n        {winnerName && gameFinished ? (\r\n          <h2 className=\"playing-area__winner-name\">{winnerName} won</h2>\r\n        ) : (\r\n          <span className=\"playing-area__winner-name\"></span>\r\n        )}\r\n        <div\r\n          ref={this.element}\r\n          className=\"playing-area__field\"\r\n          style={{\r\n            gridTemplateColumns: `repeat(${gameMode.field}, 1fr)`,\r\n            height: this.width\r\n          }}\r\n        >\r\n          {fields.map(field => (\r\n            <div\r\n              className=\"playing-area__field-element\"\r\n              key={field.key}\r\n              style={\r\n                ({},\r\n                field.inAction\r\n                  ? {\r\n                      backgroundColor: \"blue\"\r\n                    }\r\n                  : field.failed\r\n                  ? {\r\n                      backgroundColor: \"red\"\r\n                    }\r\n                  : field.won\r\n                  ? {\r\n                      backgroundColor: \"green\"\r\n                    }\r\n                  : {\r\n                      backgroundColor: \"white\"\r\n                    })\r\n              }\r\n              onClick={() => this.gameWin(field)}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayingField;\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\";\r\nimport \"./WinnersList.scss\";\r\n\r\nconst WINNERS_LIST_URL =\r\n  \"https://starnavi-frontend-test-task.herokuapp.com/winners\";\r\n\r\nclass WinnersList extends Component {\r\n  state = {\r\n    winnersList: [],\r\n    sent: false\r\n  };\r\n\r\n  getWinnersList = async () => {\r\n    try {\r\n      const response = await fetch(WINNERS_LIST_URL);\r\n      const data = await response.json();\r\n      this.setState({ winnersList: data });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  sendWinnerAndUpdate = name => {\r\n    if (this.props.gameFinished) {\r\n      const winner = {\r\n        winner: name,\r\n        date: moment().format(\"H:mm; D MMMM YYYY\"),\r\n        id: Math.random()\r\n      };\r\n      fetch(WINNERS_LIST_URL, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(winner),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      })\r\n        .then(response => response.json())\r\n        .then(res => this.setState({ winnersList: res }));\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getWinnersList();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps !== this.props) {\r\n      this.sendWinnerAndUpdate(this.props.winnerName);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { winnersList } = this.state;\r\n\r\n    return (\r\n      <section className=\"winner-list\">\r\n        <h1 className=\"winner-list__header\">Leader Board</h1>\r\n        <ul className=\"winner-list__list\">\r\n          {winnersList.map(winner => (\r\n            <div className=\" winner-list__list-element\" key={winner.id}>\r\n              <div className=\"winner-list__list-element-name\">\r\n                {winner.winner}\r\n              </div>\r\n              <div className=\"winner-list__list-element-date\">\r\n                {moment(winner.date, \"H:mm; D MMMM YYYY\").format(\r\n                  \"D MMMM YYYY, H:mm\"\r\n                ) || winner.date}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WinnersList;\r\n","import React, { Component } from \"react\";\nimport GameSettingsBar from \"./Components/GameSettingBar/GameSettingBar\";\nimport PlayingField from \"./Components/PlayingField/PlayingField\";\nimport WinnersList from \"./Components/WinnersList/WinnersList\";\nimport \"./App.scss\";\n\nconst GAME_SETTINGS_URL =\n  \"https://starnavi-frontend-test-task.herokuapp.com/game-settings\";\n\nclass App extends Component {\n  state = {\n    gameSettings: {},\n    gameMode: null,\n    playerName: \"\",\n    gameInProgress: false,\n    gameFinished: false,\n    winnerName: \"\"\n  };\n\n  getGameSettingsData = async () => {\n    try {\n      const response = await fetch(GAME_SETTINGS_URL);\n      const data = await response.json();\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          const element = data[key];\n          element.modeName = key;\n        }\n      }\n      this.setState({ gameSettings: data });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  componentDidMount() {\n    this.getGameSettingsData();\n  }\n\n  setGameModeValue = e => {\n    const modeSettings = Object.values(this.state.gameSettings).find(\n      mode => mode.modeName === e.currentTarget.value\n    );\n    this.setState({ gameMode: modeSettings });\n  };\n\n  onNameChange = name => {\n    this.setState({ playerName: name });\n  };\n\n  setGameInProgress = state => {\n    const gameInProgress = state;\n    this.setState({ gameInProgress });\n  };\n\n  setGameFinished = state => {\n    const gameFinished = state;\n    this.setState({ gameFinished });\n  };\n\n  setWinnerName = winnerName => {\n    this.setState({ winnerName });\n  };\n\n  render() {\n    const {\n      gameMode,\n      winnerName,\n      playerName,\n      gameSettings,\n      gameFinished,\n      gameInProgress\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <section className=\"gaming-section\">\n          <GameSettingsBar\n            gameMode={gameMode}\n            playerName={playerName}\n            gameFinished={gameFinished}\n            gameSettings={gameSettings}\n            gameInProgress={gameInProgress}\n            onNameChange={this.onNameChange}\n            setGameMode={this.setGameModeValue}\n            setGameFinished={this.setGameFinished}\n            setGameInProgress={this.setGameInProgress}\n          />\n          {gameMode && (\n            <PlayingField\n              gameMode={gameMode}\n              winnerName={winnerName}\n              playerName={playerName}\n              gameFinished={gameFinished}\n              gameInProgress={gameInProgress}\n              setWinnerName={this.setWinnerName}\n              setGameFinished={this.setGameFinished}\n              setGameInProgress={this.setGameInProgress}\n            />\n          )}\n        </section>\n        <WinnersList winnerName={winnerName} gameFinished={gameFinished} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}