{"version":3,"sources":["Components/GameSettingBar/GameSettingBar.jsx","Components/PlayingField/PlayingField.jsx","Components/WinnersList/WinnersList.jsx","App.js","serviceWorker.js","index.js"],"names":["GameSettingsBar","this","props","gameSettings","setGameMode","onNameChange","playerName","setGameInProgress","gameInProgress","setGameFinished","gameFinished","setWinnerName","gameMode","className","disabled","onChange","e","name","id","Object","keys","map","mode","key","value","type","onClick","Component","PlayingField","gameStartAndFail","state","computerScore","Math","floor","fields","length","playerScore","element","random","failed","won","inAction","setState","currentField","setTimeout","delay","gameWin","field","find","item","React","createRef","width","i","createFields","current","offsetWidth","prevProps","winnerName","ref","style","gridTemplateColumns","height","backgroundColor","WINNERS_LIST_URL","WinnersList","winnersList","getWinnersList","a","async","fetch","response","json","data","console","error","onSomeoneWins","winner","date","Date","log","JSON","stringify","GAME_SETTINGS_URL","App","getGameSettingsData","hasOwnProperty","modeName","setGameModeValue","modeSettings","values","currentTarget","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06229688.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./GameSettingBar.scss\";\r\n\r\nclass GameSettingsBar extends Component {\r\n  render() {\r\n    const {\r\n      gameSettings,\r\n      setGameMode,\r\n      onNameChange,\r\n      playerName,\r\n      setGameInProgress,\r\n      gameInProgress,\r\n      setGameFinished,\r\n      gameFinished,\r\n      setWinnerName,\r\n      gameMode\r\n    } = this.props;\r\n\r\n    const chaningMode = e => {\r\n      return setGameMode(e);\r\n    };\r\n\r\n    const onButtonClick = () => {\r\n      setGameFinished(false);\r\n      setGameInProgress(true);\r\n      setWinnerName(\"\");\r\n    };\r\n\r\n    return (\r\n      <nav className=\"bg-transparent navbar navbar-expand-lg navbar-light bg-light\">\r\n        <select\r\n          className=\"custom-select text-white\"\r\n          disabled={gameInProgress}\r\n          onChange={chaningMode}\r\n          name=\"\"\r\n          id=\"\"\r\n        >\r\n          <option>Pick game mode</option>\r\n          {gameSettings &&\r\n            Object.keys(gameSettings).map(mode => (\r\n              <option\r\n                key={gameSettings[mode][\"modeName\"]}\r\n                value={gameSettings[mode][\"modeName\"]}\r\n              >\r\n                {gameSettings[mode][\"modeName\"]}\r\n              </option>\r\n            ))}\r\n        </select>\r\n        <input\r\n          className=\"form-control mr-sm-2\"\r\n          value={playerName}\r\n          onChange={onNameChange}\r\n          disabled={gameInProgress}\r\n          type=\"text\"\r\n        />\r\n        <button\r\n          className=\"btn btn-outline-success my-2 my-sm-0\"\r\n          disabled={!playerName || gameInProgress || !gameMode}\r\n          onClick={onButtonClick}\r\n        >\r\n          {gameFinished ? \"Replay\" : \"Play\"}\r\n        </button>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameSettingsBar;\r\n","import React, { Component } from \"react\";\r\nimport \"./PlayingField.scss\";\r\n\r\nclass PlayingField extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fields: [],\r\n      currentField: {},\r\n      computerScore: 0,\r\n      playerScore: 0\r\n    };\r\n    this.element = React.createRef();\r\n    this.width = 0;\r\n  }\r\n\r\n  createFields() {\r\n    const fields = [];\r\n    for (let i = 0; i < this.props.gameMode.field ** 2; i++) {\r\n      fields[`${i}`] = {\r\n        failed: false,\r\n        won: false,\r\n        inAction: false,\r\n        key: `${i}`\r\n      };\r\n    }\r\n    this.setState({ fields });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.createFields();\r\n    this.width = this.element.current.offsetWidth;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props !== prevProps) {\r\n      this.setState({\r\n        fields: [],\r\n        currentField: {},\r\n        computerScore: 0,\r\n        playerScore: 0\r\n      });\r\n      this.createFields();\r\n      if (this.props.gameInProgress && !this.props.gameFinished) {\r\n        this.gameStartAndFail();\r\n        this.width = this.element.current.offsetWidth;\r\n      }\r\n    }\r\n  }\r\n\r\n  gameStartAndFail = () => {\r\n    if (\r\n      this.state.computerScore >= Math.floor(this.state.fields.length / 2) ||\r\n      this.state.playerScore >= Math.floor(this.state.fields.length / 2)\r\n    ) {\r\n      this.props.setGameFinished(true);\r\n      this.props.setGameInProgress(false);\r\n      return this.state.computerScore > this.state.playerScore\r\n        ? this.props.setWinnerName(\"Computer AI\")\r\n        : this.props.setWinnerName(this.props.playerName);\r\n    }\r\n    const fields = [...this.state.fields];\r\n    const element = fields[Math.floor(Math.random() * fields.length)];\r\n    if (element.failed || element.won) {\r\n      return this.gameStartAndFail();\r\n    }\r\n    element.inAction = true;\r\n    this.setState({ fields, currentField: element });\r\n    setTimeout(() => {\r\n      if (element.won !== true && element.inAction !== false) {\r\n        let computerScore = this.state.computerScore;\r\n        computerScore += 1;\r\n        element.inAction = false;\r\n        element.failed = true;\r\n        this.computerScore += 1;\r\n        this.setState({ fields, computerScore });\r\n        this.gameStartAndFail();\r\n      }\r\n    }, this.props.gameMode.delay);\r\n  };\r\n\r\n  gameWin = field => {\r\n    if (!this.props.gameInProgress) return;\r\n    const fields = [...this.state.fields];\r\n    const currentField = fields.find(item => item.key === field.key);\r\n    if (currentField === this.state.currentField) {\r\n      let playerScore = this.state.playerScore;\r\n      playerScore += 1;\r\n      fields[`${field.key}`].won = true;\r\n      fields[`${field.key}`].inAction = false;\r\n      this.setState({ fields, playerScore }, this.gameStartAndFail());\r\n    } else {\r\n      let computerScore = this.state.computerScore;\r\n      computerScore += 1;\r\n      const field = fields[`${this.state.currentField.key}`];\r\n      fields[`${field.key}`].failed = true;\r\n      fields[`${field.key}`].inAction = false;\r\n      this.setState({ fields, computerScore }, this.gameStartAndFail());\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { fields } = this.state;\r\n    const { gameMode, winnerName } = this.props;\r\n\r\n    return (\r\n      <section className=\"playing-area\">\r\n        {winnerName ? (\r\n          <h2 className=\"playing-area__winner-name\">{winnerName} won</h2>\r\n        ) : (\r\n          <span className=\"playing-area__winner-name\"></span>\r\n        )}\r\n        <div\r\n          ref={this.element}\r\n          className=\"playing-area__field\"\r\n          style={{\r\n            gridTemplateColumns: `repeat(${gameMode.field}, 1fr)`,\r\n            height: this.width\r\n          }}\r\n        >\r\n          {fields.map(field => (\r\n            <div\r\n              className=\"playing-area__field-element\"\r\n              key={field.key}\r\n              style={\r\n                ({},\r\n                field.inAction\r\n                  ? {\r\n                      backgroundColor: \"blue\"\r\n                    }\r\n                  : field.failed\r\n                  ? {\r\n                      backgroundColor: \"red\"\r\n                    }\r\n                  : field.won\r\n                  ? {\r\n                      backgroundColor: \"green\"\r\n                    }\r\n                  : {\r\n                      backgroundColor: \"white\"\r\n                    })\r\n              }\r\n              onClick={() => this.gameWin(field)}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayingField;\r\n","import React, { Component } from \"react\";\r\nimport \"./WinnersList.scss\";\r\n\r\nconst WINNERS_LIST_URL =\r\n  \"https://starnavi-frontend-test-task.herokuapp.com/winners\";\r\n\r\nclass WinnersList extends Component {\r\n  state = {\r\n    winnersList: []\r\n  };\r\n\r\n  getWinnersList = async () => {\r\n    try {\r\n      const response = await fetch(WINNERS_LIST_URL);\r\n      const data = await response.json();\r\n      this.setState({ winnersList: data });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  onSomeoneWins = name => {\r\n    if (this.props.gameFinished) {\r\n      const winner = {\r\n        winner: name,\r\n        date: new Date()\r\n      };\r\n      console.log(JSON.stringify(winner));\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getWinnersList();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps !== this.props) {\r\n      this.onSomeoneWins(this.props.winnerName);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { winnersList } = this.state;\r\n\r\n    return (\r\n      <section className=\"winner-list\">\r\n        <h1 className=\"winner-list__header\">Leader Board</h1>\r\n        <ul className=\"winner-list__list\">\r\n          {winnersList.map(winner => (\r\n            <div className=\" winner-list__list-element\" key={winner.id}>\r\n              <div className=\"winner-list__list-element-name\">\r\n                {winner.winner}\r\n              </div>\r\n              <div className=\"winner-list__list-element-date\">\r\n                {winner.date}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WinnersList;\r\n","import React, { Component } from \"react\";\nimport GameSettingsBar from \"./Components/GameSettingBar/GameSettingBar\";\nimport PlayingField from \"./Components/PlayingField/PlayingField\";\nimport WinnersList from \"./Components/WinnersList/WinnersList\";\nimport \"./App.scss\";\n\nconst GAME_SETTINGS_URL =\n  \"https://starnavi-frontend-test-task.herokuapp.com/game-settings\";\n\nclass App extends Component {\n  state = {\n    gameSettings: {},\n    gameMode: null,\n    playerName: \"\",\n    gameInProgress: false,\n    gameFinished: false,\n    winnerName: \"\"\n  };\n\n  getGameSettingsData = async () => {\n    try {\n      const response = await fetch(GAME_SETTINGS_URL);\n      const data = await response.json();\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          const element = data[key];\n          element.modeName = key;\n        }\n      }\n      this.setState({ gameSettings: data });\n      // this.setState({ gameMode: data.easyMode });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  componentDidMount() {\n    this.getGameSettingsData();\n  }\n\n  setGameModeValue = e => {\n    const modeSettings = Object.values(this.state.gameSettings).find(\n      mode => mode.modeName === e.currentTarget.value\n    );\n    this.setState({ gameMode: modeSettings });\n  };\n\n  onNameChange = e => {\n    this.setState({ playerName: e.currentTarget.value });\n  };\n\n  setGameInProgress = state => {\n    const gameInProgress = state;\n    this.setState({ gameInProgress });\n  };\n\n  setGameFinished = state => {\n    const gameFinished = state;\n    this.setState({ gameFinished });\n  };\n\n  setWinnerName = winnerName => {\n    this.setState({ winnerName });\n  };\n\n  render() {\n    const {\n      gameSettings,\n      playerName,\n      gameMode,\n      gameInProgress,\n      gameFinished,\n      winnerName\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <section className=\"gaming-section\">\n          <GameSettingsBar\n            gameSettings={gameSettings}\n            setGameMode={this.setGameModeValue}\n            gameMode={gameMode}\n            onNameChange={this.onNameChange}\n            playerName={playerName}\n            setGameInProgress={this.setGameInProgress}\n            gameInProgress={gameInProgress}\n            setGameFinished={this.setGameFinished}\n            gameFinished={gameFinished}\n            setWinnerName={this.setWinnerName}\n          />\n          {gameMode && (\n            <PlayingField\n              setGameFinished={this.setGameFinished}\n              setGameInProgress={this.setGameInProgress}\n              gameFinished={gameFinished}\n              gameMode={gameMode}\n              gameInProgress={gameInProgress}\n              winnerName={winnerName}\n              setWinnerName={this.setWinnerName}\n              playerName={playerName}\n            />\n          )}\n        </section>\n        {<WinnersList winnerName={winnerName} gameFinished={gameFinished} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}